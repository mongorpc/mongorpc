// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoRPCClient is the client API for MongoRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoRPCClient interface {
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
}

type mongoRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoRPCClient(cc grpc.ClientConnInterface) MongoRPCClient {
	return &mongoRPCClient{cc}
}

func (c *mongoRPCClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPC/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoRPCServer is the server API for MongoRPC service.
// All implementations must embed UnimplementedMongoRPCServer
// for forward compatibility
type MongoRPCServer interface {
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	mustEmbedUnimplementedMongoRPCServer()
}

// UnimplementedMongoRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMongoRPCServer struct {
}

func (UnimplementedMongoRPCServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedMongoRPCServer) mustEmbedUnimplementedMongoRPCServer() {}

// UnsafeMongoRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoRPCServer will
// result in compilation errors.
type UnsafeMongoRPCServer interface {
	mustEmbedUnimplementedMongoRPCServer()
}

func RegisterMongoRPCServer(s grpc.ServiceRegistrar, srv MongoRPCServer) {
	s.RegisterService(&MongoRPC_ServiceDesc, srv)
}

func _MongoRPC_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPC/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoRPC_ServiceDesc is the grpc.ServiceDesc for MongoRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongorpc.MongoRPC",
	HandlerType: (*MongoRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCollections",
			Handler:    _MongoRPC_ListCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongorpc.proto",
}
