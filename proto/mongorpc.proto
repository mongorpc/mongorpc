// Copyright 2021 MongoRPC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mongorpc;

option go_package = "github.com/mongorpc/mongorpc/proto";

// TODO: convert all document_id to ObjectId

// Null is a special type that is used to represent a null value in a MongoDB
enum NullValue {
  NULL_VALUE = 0;
}

// Array is a special type that is used to represent an array value in a MongoDB
message ArrayValue {
  repeated Value values = 1;
}

// Map is a special type that is used to represent a map value in a MongoDB
message MapValue {
  map<string, Value> fields = 1;
}

// Timestamp is a special type that is used to represent a timestamp value in a MongoDB
message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message ObjectID {
  string id = 1;
}

// Value is a special type that is used to represent a value in a MongoDB
message Value {
  oneof type {
    // double represents a double value in a MongoDB
    double double_value = 1;
    // string represents a string value in a MongoDB
    string string_value = 2;
    // Map represents a map value in a MongoDB
    MapValue map_value = 3;
    // Array represents an array value in a MongoDB
    ArrayValue array_value = 4;
    // Bytes represents a bytes value in a MongoDB
    bytes bytes_value = 5;
    // Boolean represents a boolean value in a MongoDB
    bool bool_value = 8;
    // Timestamp represents a timestamp value in a MongoDB
    Timestamp date_value = 9;
    // Null represents a null value in a MongoDB
    NullValue null_value = 10;
    // integer represents an integer value in a MongoDB
    int64 integer_value = 23;
    //undefined = 6;
    ObjectID object_id_value = 7;
    //regex regex_value = 11;
    //dbPointer db_pointer_value = 12;
    //code code_value = 13;
    //symbol symbol_value = 14;
    //codewscope code_w_scope_value = 15;
    // int32 int32_value = 16;
    // int64 int64_value = 17;
    //timestamp timestamp_value = 18;
    //int32 timestamp_value = 19;
    //int64 timestamp_value = 20;
    //minKey min_key_value = 21;
    //maxKey max_key_value = 22;

  }
}

// Set the Sort Order
message Sort {
  string field = 1;
  bool ascending = 2;
}

// == is a special operator that is used to represent an equality filter in a MongoDB
message Equal {
  string field = 1;
  Value value = 2;
}

// != is a special operator that is used to represent an inequality filter in a MongoDB
message NotEqual {
  string field = 1;
  Value value = 2;
}

// < is a special operator that is used to represent a less than filter in a MongoDB
message Less {
  string field = 1;
  Value value = 2;
}

// <= is a special operator that is used to represent a less than or equal to filter in a MongoDB
message LessEqual {
  string field = 1;
  Value value = 2;
}

// > is a special operator that is used to represent a greater than filter in a MongoDB
message Greater {
  string field = 1;
  Value value = 2;
}

// >= is a special operator that is used to represent a greater than or equal to filter in a MongoDB
message GreaterEqual {
  string field = 1;
  Value value = 2;
}

// in is a special operator that is used to represent an in filter in a MongoDB
message In {
  string field = 1;
  repeated Value values = 2;
}

// nin is a special operator that is used to represent a not in filter in a MongoDB
message NotIn {
  string field = 1;
  repeated Value values = 2;
}

// Exists is a special operator that is used to represent an exists filter in a MongoDB
message Exists {
  string field = 1;
}

// Not exists is a special operator that is used to represent a not exists filter in a MongoDB
message NotExists {
  string field = 1;
}

// Filter is a special type that is used to represent a filter in a MongoDB
message Filter {
  // one of operator
  oneof operator {
    // Equal represents an equal operator in a MongoDB
    Equal equal = 1;
    // NotEqual represents a not equal operator in a MongoDB
    NotEqual not_equal = 2;
    // Less represents a less operator in a MongoDB
    Less less = 3;
    // LessEqual represents a less equal operator in a MongoDB
    LessEqual less_equal = 4;
    // Greater represents a greater operator in a MongoDB
    Greater greater = 5;
    // GreaterEqual represents a greater equal operator in a MongoDB
    GreaterEqual greater_equal = 6;
    // In represents an in operator in a MongoDB
    In in = 7;
    // NotIn represents a not in operator in a MongoDB
    NotIn not_in = 8;
    // Exists represents an exists operator in a MongoDB
    Exists exists = 9;
    // NotExists represents a not exists operator in a MongoDB
    NotExists not_exists = 10;
  }
}

// ListCollectionsRequest is a special type that is used to represent a list collections request in a MongoDB
message ListCollectionsRequest {
  // Database name
  string database = 1;
}

// ListCollectionsResponse is a special type that is used to represent a list collections response in a MongoDB
message ListCollectionsResponse {
  // Array of collection names
  ArrayValue collections = 1;
}

// GetCollectionRequest is a special type that is used to represent a get collection request in a MongoDB
message GetDocumentRequest {
  // The database to query
  string database = 1;
  // The collection to query
  string collection = 2;
  // The document to query
  string document_id = 3;
}

// GetDocumentResponse is a special type that is used to represent a get document response in a MongoDB
message GetDocumentResponse {
  // Document Value
  Value document = 1;
}

// ListDocumentsRequest is a special type that is used to represent a list documents request in a MongoDB
message ListDocumentsRequest {
  // The database to query
  string database = 1;
  // The collection to query
  string collection = 2;
  // Limit the number of documents returned
  int32 limit = 3;
  // Skip the first n documents
  int32 skip = 4;
  // Filter to apply to the query
  repeated Filter filter = 5;
  // Sort to apply to the query
  repeated Sort sort = 6;
}

// ListDocumentsResponse is a special type that is used to represent a list documents response in a MongoDB
message ListDocumentsResponse {
  // Array of documents
  ArrayValue documents = 1;
}

// InsertDocumentRequest is a special type that is used to represent a insert document request in a MongoDB
message CreateDocumentRequest {
  // The database to insert the document into
  string database = 1;
  // The collection to insert the document into
  string collection = 2;
  // The document to insert
  Value document = 3;
}

// InsertDocumentResponse is a special type that is used to represent a insert document response in a MongoDB
message CreateDocumentResponse {
  // document id
  string document_id = 1;
}

// UpdateDocumentRequest is a special type that is used to represent a update document request in a MongoDB
message UpdateDocumentRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The document to update
  string document_id = 3;
  // Document Values
  Value document = 4;
}

// UpdateDocumentResponse is a special type that is used to represent a update document response in a MongoDB
message UpdateDocumentResponse {
  int64 matched_count = 1;
  int64 modified_count = 2;
  int64 upserted_count = 3;
  Value upserted_id = 4;
}

// DeleteDocumentRequest is a special type that is used to represent a delete document request in a MongoDB
message DeleteDocumentRequest {
  // database name
  string database = 1;
  // collection name
  string collection = 2;
  // document id
  string document_id = 3;
}

// DeleteDocumentResponse is a special type that is used to represent a delete document response in a MongoDB
message DeleteDocumentResponse {
  // Deleted Document Count
  int64 deleted_count = 1;
}

message ListenRequest {
  // The database to listen to
  string database = 1;
  // The collection to listen to
  string collection = 2;
  // The operation to listen to
  optional OperationType operation_type = 9;
}

  // operation types
  enum OperationType {
    // Insert
    INSERT = 0;
    // Update
    UPDATE = 1;
    // Delete
    DELETE = 2;
    // Replace
    REPLACE = 3;
  }

message ListenResponse {
  // The operation that was performed
  string operation = 1;
  // The document that was modified
  Value document = 2;
}

message Index {
  // The name of the index
  string name = 1;
  // The keys to index
  repeated IndexKey keys = 2;
  // The unique flag
  bool unique = 3;
}

message IndexKey {
  // The field to index
  string field = 1;
  // The direction to index
  IndexDirection direction = 2;
}

enum IndexDirection {
  ASCENDING = 0;
  DESCENDING = 1;
}

message CreateIndexRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The index to create
  Index index = 3;
}

message CreateIndexResponse {
  // The name of the index
  string name = 1;
}

message ListIndexesRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
}

message ListIndexesResponse {
  // The indexes
  repeated Index indexes = 1;
}

message DeleteIndexRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The name of the index to delete
  string name = 3;
}

message DeleteIndexResponse {
  // The name of the index that was deleted
  string name = 1;
}

message ReindexRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The name of the index to delete
  string name = 3;
}

message ReindexResponse {
  // The name of the index that was reindexed
  string name = 1;
}

message CountDocumentsRequest {
  // The database to listen to
  string database = 1;
  // The collection to listen to
  string collection = 2;
  // The document to listen to
  // string document_id = 3;
  // The operation to listen to
  string operation = 4;
  // The filter to apply to the query
  repeated Filter filter = 5;
  // The sort to apply to the query
  repeated Sort sort = 6;
  // The limit to apply to the query
  int32 limit = 7;
  // The skip to apply to the query
  int32 skip = 8;
}

message CountDocumentsResponse {
  // The count of documents
  int64 count = 1;
}

message Empty {}

message CollectionStatsRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
}

message CollectionStatsResponse {
  // The count of documents
  int64 count = 1;
  // The size of the collection
  int64 size = 2;
  // The average document size
  int64 avg_obj_size = 3;
  // The storage size of the collection
  int64 storage_size = 4;
  // The total index size
  int64 total_index_size = 5;
  // The total size of the indexes
  int64 index_size = 6;
  // The number of indexes
  int32 num_indexes = 7;
  // The number of indexes
  int32 nindexes = 8;
  // The free storage size
  int64 free_storage_size = 9;
}

message CreateCollectionRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The name of the collection
  string name = 3;
}

message CreateCollectionResponse {
  // The name of the collection
  string name = 1;
}

message RenameCollectionRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The name of the collection
  string name = 3;
}

message RenameCollectionResponse {
  // The name of the collection
  string name = 1;
}

message DeleteCollectionRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
}

message DeleteCollectionResponse {}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3; // Used only by the Watch method.
  }
  ServingStatus status = 1;
}

// MongoRPC
service MongoRPC {
  // ListCollections lists the collections in a database.
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  // GetDocument gets a document from a collection.
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
  // ListDocuments lists the documents in a collection.
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);
  // CreateDocument creates a document in a collection.
  rpc CreateDocument(CreateDocumentRequest) returns (CreateDocumentResponse);
  // UpdateDocument updates a document in a collection.
  rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentResponse);
  // DeleteDocument deletes a document from a collection.
  rpc DeleteDocument(DeleteDocumentRequest) returns (DeleteDocumentResponse);
  // Returns the count of documents that match the query for a collection or view.
  rpc CountDocuments(CountDocumentsRequest) returns (CountDocumentsResponse);
  // Listen listens for changes to a document in a collection.
  rpc Listen(ListenRequest) returns (stream ListenResponse);
  // Creates indexes on collections.
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse);
  // Lists indexes on collections.
  rpc ListIndexes(ListIndexesRequest) returns (ListIndexesResponse);
  // Deletes indexes on collections.
  rpc DeleteIndex(DeleteIndexRequest) returns (DeleteIndexResponse);
  // Reindexes indexes on collections.
  rpc Reindex(ReindexRequest) returns (ReindexResponse);
  // Ping is used to test the connection to the server.
  rpc Ping(Empty) returns (Empty);
  // CollectionStats returns stats about a collection.
  rpc CollectionStats(CollectionStatsRequest) returns (CollectionStatsResponse);
  // CreateCollection creates a collection.
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  // RenameCollection renames a collection.
  rpc RenameCollection(RenameCollectionRequest) returns (RenameCollectionResponse);
  // DeleteCollection drops a collection.
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse);
  // HealthCheck checks the health of the server.
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}
