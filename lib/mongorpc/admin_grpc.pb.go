// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mongorpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoRPCAdminClient is the client API for MongoRPCAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoRPCAdminClient interface {
	ListDatabases(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Value, error)
	DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*Empty, error)
	DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*Empty, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*Value, error)
	ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*Value, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*Value, error)
	DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*Empty, error)
}

type mongoRPCAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoRPCAdminClient(cc grpc.ClientConnInterface) MongoRPCAdminClient {
	return &mongoRPCAdminClient{cc}
}

func (c *mongoRPCAdminClient) ListDatabases(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/ListDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/DropDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/ListIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoRPCAdminClient) DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mongorpc.MongoRPCAdmin/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoRPCAdminServer is the server API for MongoRPCAdmin service.
// All implementations must embed UnimplementedMongoRPCAdminServer
// for forward compatibility
type MongoRPCAdminServer interface {
	ListDatabases(context.Context, *Empty) (*Value, error)
	DropDatabase(context.Context, *DropDatabaseRequest) (*Empty, error)
	CreateCollection(context.Context, *CreateCollectionRequest) (*Empty, error)
	DropCollection(context.Context, *DropCollectionRequest) (*Empty, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*Value, error)
	ListIndexes(context.Context, *ListIndexesRequest) (*Value, error)
	CreateIndex(context.Context, *CreateIndexRequest) (*Value, error)
	DropIndex(context.Context, *DropIndexRequest) (*Empty, error)
	mustEmbedUnimplementedMongoRPCAdminServer()
}

// UnimplementedMongoRPCAdminServer must be embedded to have forward compatible implementations.
type UnimplementedMongoRPCAdminServer struct {
}

func (UnimplementedMongoRPCAdminServer) ListDatabases(context.Context, *Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedMongoRPCAdminServer) DropDatabase(context.Context, *DropDatabaseRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedMongoRPCAdminServer) CreateCollection(context.Context, *CreateCollectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedMongoRPCAdminServer) DropCollection(context.Context, *DropCollectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedMongoRPCAdminServer) ListCollections(context.Context, *ListCollectionsRequest) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedMongoRPCAdminServer) ListIndexes(context.Context, *ListIndexesRequest) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedMongoRPCAdminServer) CreateIndex(context.Context, *CreateIndexRequest) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedMongoRPCAdminServer) DropIndex(context.Context, *DropIndexRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedMongoRPCAdminServer) mustEmbedUnimplementedMongoRPCAdminServer() {}

// UnsafeMongoRPCAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoRPCAdminServer will
// result in compilation errors.
type UnsafeMongoRPCAdminServer interface {
	mustEmbedUnimplementedMongoRPCAdminServer()
}

func RegisterMongoRPCAdminServer(s grpc.ServiceRegistrar, srv MongoRPCAdminServer) {
	s.RegisterService(&MongoRPCAdmin_ServiceDesc, srv)
}

func _MongoRPCAdmin_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/ListDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).ListDatabases(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/DropDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).DropDatabase(ctx, req.(*DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).DropCollection(ctx, req.(*DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/ListIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).ListIndexes(ctx, req.(*ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoRPCAdmin_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoRPCAdminServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongorpc.MongoRPCAdmin/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoRPCAdminServer).DropIndex(ctx, req.(*DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoRPCAdmin_ServiceDesc is the grpc.ServiceDesc for MongoRPCAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoRPCAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongorpc.MongoRPCAdmin",
	HandlerType: (*MongoRPCAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatabases",
			Handler:    _MongoRPCAdmin_ListDatabases_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _MongoRPCAdmin_DropDatabase_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _MongoRPCAdmin_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MongoRPCAdmin_DropCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _MongoRPCAdmin_ListCollections_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _MongoRPCAdmin_ListIndexes_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MongoRPCAdmin_CreateIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MongoRPCAdmin_DropIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongorpc/admin.proto",
}
